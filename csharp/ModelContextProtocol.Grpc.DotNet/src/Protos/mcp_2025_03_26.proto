syntax = "proto3";

package mcp;

option csharp_namespace = "Mcp";

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// Optional annotations for the client. The client can use annotations to inform how objects are used or displayed
message Annotations {
  // Describes who the intended customer of this object or data is.
  // It can include multiple entries to indicate content useful for multiple audiences (e.g., ["user", "assistant"]).
  repeated Role audience = 1;
  
  // Describes how important this data is for operating the server.
  // A value of 1 means "most important," and indicates that the data is
  // effectively required, while 0 means "least important," and indicates that
  // the data is entirely optional.
  float priority = 2;
}

// Audio provided to or from an LLM.
message AudioContent {
  // Optional annotations for the client.
  Annotations annotations = 1;
  
  // The base64-encoded audio data.
  bytes data = 2;
  
  // The MIME type of the audio. Different providers may support different audio types.
  string mimeType = 3;
  
  string type = 4; // const: "audio"
}

message BlobResourceContents {
  // A base64-encoded string representing the binary data of the item.
  bytes blob = 1;
  
  // The MIME type of this resource, if known.
  string mimeType = 2;
  
  // The URI of this resource.
  string uri = 3;
}

// Used by the client to invoke a tool provided by the server.
message CallToolRequest {
  string method = 1; // const: "tools/call"
  
  message Params {
    google.protobuf.Struct arguments = 1;
    string name = 2;
  }
  Params params = 2;
}

// The server's response to a tool call.
// Any errors that originate from the tool SHOULD be reported inside the result
// object, with isError set to true, _not_ as an MCP protocol-level error
// response. Otherwise, the LLM would not be able to see that an error occurred
// and self-correct.
// However, any errors in _finding_ the tool, an error indicating that the
// server does not support tool calls, or any other exceptional conditions,
// should be reported as an MCP error response.
message CallToolResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  repeated Content content = 2;
  
  // Whether the tool call ended in an error.
  // If not set, this is assumed to be false (the call was successful).
  bool isError = 3;
}

// Content types union
message Content {
  oneof content {
    TextContent text = 1;
    ImageContent image = 2;
    AudioContent audio = 3;
    EmbeddedResource resource = 4;
  }
}

// This notification can be sent by either side to indicate that it is cancelling a previously-issued request.
// The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.
// This notification indicates that the result will be unused, so any associated processing SHOULD cease.
// A client MUST NOT attempt to cancel its initialize request.
message CancelledNotification {
  string method = 1; // const: "notifications/cancelled"
  
  message Params {
    // An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
    string reason = 1;
    
    // The ID of the request to cancel.
    // This MUST correspond to the ID of a request previously issued in the same direction.
    RequestId requestId = 2;
  }
  Params params = 2;
}

// Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.
message ClientCapabilities {
  // Experimental, non-standard capabilities that the client supports.
  map<string, google.protobuf.Struct> experimental = 1;
  
  // Present if the client supports listing roots.
  message Roots {
    // Whether the client supports notifications for changes to the roots list.
    bool listChanged = 1;
  }
  Roots roots = 2;
  
  // Present if the client supports sampling from an LLM.
  google.protobuf.Struct sampling = 3;
}

message ClientNotification {
  oneof notification {
    CancelledNotification cancelled = 1;
    InitializedNotification initialized = 2;
    ProgressNotification progress = 3;
    RootsListChangedNotification rootsListChanged = 4;
  }
}

message ClientRequest {
  oneof request {
    InitializeRequest initialize = 1;
    PingRequest ping = 2;
    ListResourcesRequest listResources = 3;
    ListResourceTemplatesRequest listResourceTemplates = 4;
    ReadResourceRequest readResource = 5;
    SubscribeRequest subscribe = 6;
    UnsubscribeRequest unsubscribe = 7;
    ListPromptsRequest listPrompts = 8;
    GetPromptRequest getPrompt = 9;
    ListToolsRequest listTools = 10;
    CallToolRequest callTool = 11;
    SetLevelRequest setLevel = 12;
    CompleteRequest complete = 13;
  }
}

message ClientResult {
  oneof result {
    Result genericResult = 1;
    CreateMessageResult createMessage = 2;
    ListRootsResult listRoots = 3;
  }
}

// A request from the client to the server, to ask for completion options.
message CompleteRequest {
  string method = 1; // const: "completion/complete"
  
  message Params {
    // The argument's information
    message Argument {
      // The name of the argument
      string name = 1;
      
      // The value of the argument to use for completion matching.
      string value = 2;
    }
    Argument argument = 1;
    
    Reference ref = 2;
  }
  Params params = 2;
}

// Reference types union
message Reference {
  oneof reference {
    PromptReference prompt = 1;
    ResourceReference resource = 2;
  }
}

// The server's response to a completion/complete request
message CompleteResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  message Completion {
    // Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
    bool hasMore = 1;
    
    // The total number of completion options available. This can exceed the number of values actually sent in the response.
    int32 total = 2;
    
    // An array of completion values. Must not exceed 100 items.
    repeated string values = 3;
  }
  Completion completion = 2;
}

// A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.
message CreateMessageRequest {
  string method = 1; // const: "sampling/createMessage"
  
  message Params {
    // A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
    enum IncludeContext {
      INCLUDE_CONTEXT_UNSPECIFIED = 0;
      ALL_SERVERS = 1;
      NONE = 2;
      THIS_SERVER = 3;
    }
    IncludeContext includeContext = 1;
    
    // The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
    int32 maxTokens = 2;
    
    repeated SamplingMessage messages = 3;
    
    // Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
    google.protobuf.Struct metadata = 4;
    
    // The server's preferences for which model to select. The client MAY ignore these preferences.
    ModelPreferences modelPreferences = 5;
    
    repeated string stopSequences = 6;
    
    // An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
    string systemPrompt = 7;
    
    float temperature = 8;
  }
  Params params = 2;
}

// The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.
message CreateMessageResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  Content content = 2;
  
  // The name of the model that generated the message.
  string model = 3;
  
  Role role = 4;
  
  // The reason why sampling stopped, if known.
  string stopReason = 5;
}

// An opaque token used to represent a cursor for pagination.
message Cursor {
  string value = 1;
}

// The contents of a resource, embedded into a prompt or tool call result.
// It is up to the client how best to render embedded resources for the benefit
// of the LLM and/or the user.
message EmbeddedResource {
  // Optional annotations for the client.
  Annotations annotations = 1;
  
  ResourceContents resource = 2;
  
  string type = 3; // const: "resource"
}

message EmptyResult {
  Result result = 1;
}

// Used by the client to get a prompt provided by the server.
message GetPromptRequest {
  string method = 1; // const: "prompts/get"
  
  message Params {
    // Arguments to use for templating the prompt.
    map<string, string> arguments = 1;
    
    // The name of the prompt or prompt template.
    string name = 2;
  }
  Params params = 2;
}

// The server's response to a prompts/get request from the client.
message GetPromptResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  // An optional description for the prompt.
  string description = 2;
  
  repeated PromptMessage messages = 3;
}

// An image provided to or from an LLM.
message ImageContent {
  // Optional annotations for the client.
  Annotations annotations = 1;
  
  // The base64-encoded image data.
  bytes data = 2;
  
  // The MIME type of the image. Different providers may support different image types.
  string mimeType = 3;
  
  string type = 4; // const: "image"
}

// Describes the name and version of an MCP implementation.
message Implementation {
  string name = 1;
  string version = 2;
}

// This request is sent from the client to the server when it first connects, asking it to begin initialization.
message InitializeRequest {
  string method = 1; // const: "initialize"
  
  message Params {
    ClientCapabilities capabilities = 1;
    Implementation clientInfo = 2;
    
    // The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.
    string protocolVersion = 3;
  }
  Params params = 2;
}

// After receiving an initialize request from the client, the server sends this response.
message InitializeResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  ServerCapabilities capabilities = 2;
  
  // Instructions describing how to use the server and its features.
  // This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
  string instructions = 3;
  
  // The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
  string protocolVersion = 4;
  
  Implementation serverInfo = 5;
}

// This notification is sent from the client to the server after initialization has finished.
message InitializedNotification {
  string method = 1; // const: "notifications/initialized"
  
  message Params {
    // This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
    google.protobuf.Struct _meta = 1;
  }
  Params params = 2;
}

// A JSON-RPC batch request, as described in https://www.jsonrpc.org/specification#batch.
message JSONRPCBatchRequest {
  repeated JSONRPCRequestItem items = 1;
}

message JSONRPCRequestItem {
  oneof item {
    JSONRPCRequest request = 1;
    JSONRPCNotification notification = 2;
  }
}

// A JSON-RPC batch response, as described in https://www.jsonrpc.org/specification#batch.
message JSONRPCBatchResponse {
  repeated JSONRPCResponseItem items = 1;
}

message JSONRPCResponseItem {
  oneof item {
    JSONRPCResponse response = 1;
    JSONRPCError error = 2;
  }
}

// A response to a request that indicates an error occurred.
message JSONRPCError {
  message Error {
    // The error type that occurred.
    int32 code = 1;
    
    // Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).
    google.protobuf.Any data = 2;
    
    // A short description of the error. The message SHOULD be limited to a concise single sentence.
    string message = 3;
  }
  Error error = 1;
  
  RequestId id = 2;
  
  string jsonrpc = 3; // const: "2.0"
}

// Refers to any valid JSON-RPC object that can be decoded off the wire, or encoded to be sent.
message JSONRPCMessage {
  oneof message {
    JSONRPCRequest request = 1;
    JSONRPCNotification notification = 2;
    JSONRPCBatchRequest batchRequest = 3;
    JSONRPCResponse response = 4;
    JSONRPCError error = 5;
    JSONRPCBatchResponse batchResponse = 6;
  }
}

// A notification which does not expect a response.
message JSONRPCNotification {
  string jsonrpc = 1; // const: "2.0"
  string method = 2;
  
  message Params {
    // This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
    google.protobuf.Struct _meta = 1;
  }
  Params params = 3;
}

// A request that expects a response.
message JSONRPCRequest {
  RequestId id = 1;
  string jsonrpc = 2; // const: "2.0"
  string method = 3;
  
  message Params {
    message Meta {
      // If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
      ProgressToken progressToken = 1;
    }
    Meta _meta = 1;
  }
  Params params = 4;
}

// A successful (non-error) response to a request.
message JSONRPCResponse {
  RequestId id = 1;
  string jsonrpc = 2; // const: "2.0"
  Result result = 3;
}

// Sent from the client to request a list of prompts and prompt templates the server has.
message ListPromptsRequest {
  string method = 1; // const: "prompts/list"
  
  message Params {
    // An opaque token representing the current pagination position.
    // If provided, the server should return results starting after this cursor.
    string cursor = 1;
  }
  Params params = 2;
}

// The server's response to a prompts/list request from the client.
message ListPromptsResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  // An opaque token representing the pagination position after the last returned result.
  // If present, there may be more results available.
  string nextCursor = 2;
  
  repeated Prompt prompts = 3;
}

// Sent from the client to request a list of resource templates the server has.
message ListResourceTemplatesRequest {
  string method = 1; // const: "resources/templates/list"
  
  message Params {
    // An opaque token representing the current pagination position.
    // If provided, the server should return results starting after this cursor.
    string cursor = 1;
  }
  Params params = 2;
}

// The server's response to a resources/templates/list request from the client.
message ListResourceTemplatesResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  // An opaque token representing the pagination position after the last returned result.
  // If present, there may be more results available.
  string nextCursor = 2;
  
  repeated ResourceTemplate resourceTemplates = 3;
}

// Sent from the client to request a list of resources the server has.
message ListResourcesRequest {
  string method = 1; // const: "resources/list"
  
  message Params {
    // An opaque token representing the current pagination position.
    // If provided, the server should return results starting after this cursor.
    string cursor = 1;
  }
  Params params = 2;
}

// The server's response to a resources/list request from the client.
message ListResourcesResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  // An opaque token representing the pagination position after the last returned result.
  // If present, there may be more results available.
  string nextCursor = 2;
  
  repeated Resource resources = 3;
}

// Sent from the server to request a list of root URIs from the client. Roots allow
// servers to ask for specific directories or files to operate on. A common example
// for roots is providing a set of repositories or directories a server should operate
// on.
// This request is typically used when the server needs to understand the file system
// structure or access specific locations that the client has permission to read from.
message ListRootsRequest {
  string method = 1; // const: "roots/list"
  
  message Params {
    message Meta {
      // If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
      ProgressToken progressToken = 1;
    }
    Meta _meta = 1;
  }
  Params params = 2;
}

// The client's response to a roots/list request from the server.
// This result contains an array of Root objects, each representing a root directory
// or file that the server can operate on.
message ListRootsResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  repeated Root roots = 2;
}

// Sent from the client to request a list of tools the server has.
message ListToolsRequest {
  string method = 1; // const: "tools/list"
  
  message Params {
    // An opaque token representing the current pagination position.
    // If provided, the server should return results starting after this cursor.
    string cursor = 1;
  }
  Params params = 2;
}

// The server's response to a tools/list request from the client.
message ListToolsResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  // An opaque token representing the pagination position after the last returned result.
  // If present, there may be more results available.
  string nextCursor = 2;
  
  repeated Tool tools = 3;
}

// The severity of a log message.
// These map to syslog message severities, as specified in RFC-5424:
// https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1
enum LoggingLevel {
  LOGGING_LEVEL_UNSPECIFIED = 0;
  ALERT = 1;
  CRITICAL = 2;
  DEBUG = 3;
  EMERGENCY = 4;
  ERROR = 5;
  INFO = 6;
  NOTICE = 7;
  WARNING = 8;
}

// Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.
message LoggingMessageNotification {
  string method = 1; // const: "notifications/message"
  
  message Params {
    // The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
    google.protobuf.Any data = 1;
    
    // The severity of this log message.
    LoggingLevel level = 2;
    
    // An optional name of the logger issuing this message.
    string logger = 3;
  }
  Params params = 2;
}

// Hints to use for model selection.
// Keys not declared here are currently left unspecified by the spec and are up
// to the client to interpret.
message ModelHint {
  // A hint for a model name.
  // The client SHOULD treat this as a substring of a model name; for example:
  //  - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`
  //  - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.
  //  - `claude` should match any Claude model
  // The client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:
  //  - `gemini-1.5-flash` could match `claude-3-haiku-20240307`
  string name = 1;
}

// The server's preferences for model selection, requested of the client during sampling.
// Because LLMs can vary along multiple dimensions, choosing the "best" model is
// rarely straightforward.  Different models excel in different areas—some are
// faster but less capable, others are more capable but more expensive, and so
// on. This interface allows servers to express their priorities across multiple
// dimensions to help clients make an appropriate selection for their use case.
// These preferences are always advisory. The client MAY ignore them. It is also
// up to the client to decide how to interpret these preferences and how to
// balance them against other considerations.
message ModelPreferences {
  // How much to prioritize cost when selecting a model. A value of 0 means cost
  // is not important, while a value of 1 means cost is the most important
  // factor.
  float costPriority = 1;
  
  // Optional hints to use for model selection.
  // If multiple hints are specified, the client MUST evaluate them in order
  // (such that the first match is taken).
  // The client SHOULD prioritize these hints over the numeric priorities, but
  // MAY still use the priorities to select from ambiguous matches.
  repeated ModelHint hints = 2;
  
  // How much to prioritize intelligence and capabilities when selecting a
  // model. A value of 0 means intelligence is not important, while a value of 1
  // means intelligence is the most important factor.
  float intelligencePriority = 3;
  
  // How much to prioritize sampling speed (latency) when selecting a model. A
  // value of 0 means speed is not important, while a value of 1 means speed is
  // the most important factor.
  float speedPriority = 4;
}

message Notification {
  string method = 1;
  
  message Params {
    // This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
    google.protobuf.Struct _meta = 1;
  }
  Params params = 2;
}

message PaginatedRequest {
  string method = 1;
  
  message Params {
    // An opaque token representing the current pagination position.
    // If provided, the server should return results starting after this cursor.
    string cursor = 1;
  }
  Params params = 2;
}

message PaginatedResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  // An opaque token representing the pagination position after the last returned result.
  // If present, there may be more results available.
  string nextCursor = 2;
}

// A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.
message PingRequest {
  string method = 1; // const: "ping"
  
  message Params {
    message Meta {
      // If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
      ProgressToken progressToken = 1;
    }
    Meta _meta = 1;
  }
  Params params = 2;
}

// An out-of-band notification used to inform the receiver of a progress update for a long-running request.
message ProgressNotification {
  string method = 1; // const: "notifications/progress"
  
  message Params {
    // An optional message describing the current progress.
    string message = 1;
    
    // The progress thus far. This should increase every time progress is made, even if the total is unknown.
    float progress = 2;
    
    // The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
    ProgressToken progressToken = 3;
    
    // Total number of items to process (or total progress required), if known.
    float total = 4;
  }
  Params params = 2;
}

// A progress token, used to associate progress notifications with the original request.
message ProgressToken {
  oneof token {
    string stringToken = 1;
    int32 intToken = 2;
  }
}

// A prompt or prompt template that the server offers.
message Prompt {
  // A list of arguments to use for templating the prompt.
  repeated PromptArgument arguments = 1;
  
  // An optional description of what this prompt provides
  string description = 2;
  
  // The name of the prompt or prompt template.
  string name = 3;
}

// Describes an argument that a prompt can accept.
message PromptArgument {
  // A human-readable description of the argument.
  string description = 1;
  
  // The name of the argument.
  string name = 2;
  
  // Whether this argument must be provided.
  bool required = 3;
}

// An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.
message PromptListChangedNotification {
  string method = 1; // const: "notifications/prompts/list_changed"
  
  message Params {
    // This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
    google.protobuf.Struct _meta = 1;
  }
  Params params = 2;
}

// Describes a message returned as part of a prompt.
// This is similar to `SamplingMessage`, but also supports the embedding of
// resources from the MCP server.
message PromptMessage {
  Content content = 1;
  Role role = 2;
}

// Identifies a prompt.
message PromptReference {
  // The name of the prompt or prompt template
  string name = 1;
  
  string type = 2; // const: "ref/prompt"
}

// Sent from the client to the server, to read a specific resource URI.
message ReadResourceRequest {
  string method = 1; // const: "resources/read"
  
  message Params {
    // The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
    string uri = 1;
  }
  Params params = 2;
}

// The server's response to a resources/read request from the client.
message ReadResourceResult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
  
  repeated ResourceContents contents = 2;
}

message Request {
  string method = 1;
  
  message Params {
    message Meta {
      // If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
      ProgressToken progressToken = 1;
    }
    Meta _meta = 1;
  }
  Params params = 2;
}

// A uniquely identifying ID for a request in JSON-RPC.
message RequestId {
  oneof id {
    string stringId = 1;
    int32 intId = 2;
  }
}

// A known resource that the server is capable of reading.
message Resource {
  // Optional annotations for the client.
  Annotations annotations = 1;
  
  // A description of what this resource represents.
  // This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
  string description = 2;
  
  // The MIME type of this resource, if known.
  string mimeType = 3;
  
  // A human-readable name for this resource.
  // This can be used by clients to populate UI elements.
  string name = 4;
  
  // The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.
  // This can be used by Hosts to display file sizes and estimate context window usage.
  int32 size = 5;
  
  // The URI of this resource.
  string uri = 6;
}

// The contents of a specific resource or sub-resource.
message ResourceContents {
  oneof contents {
    TextResourceContents text = 1;
    BlobResourceContents blob = 2;
  }
}

// An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.
message ResourceListChangedNotification {
  string method = 1; // const: "notifications/resources/list_changed"
  
  message Params {
    // This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
    google.protobuf.Struct _meta = 1;
  }
  Params params = 2;
}

// A reference to a resource or resource template definition.
message ResourceReference {
  string type = 1; // const: "ref/resource"
  
  // The URI or URI template of the resource.
  string uri = 2;
}

// A template description for resources available on the server.
message ResourceTemplate {
  // Optional annotations for the client.
  Annotations annotations = 1;
  
  // A description of what this template is for.
  // This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
  string description = 2;
  
  // The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
  string mimeType = 3;
  
  // A human-readable name for the type of resource this template refers to.
  // This can be used by clients to populate UI elements.
  string name = 4;
  
  // A URI template (according to RFC 6570) that can be used to construct resource URIs.
  string uriTemplate = 5;
}

// A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.
message ResourceUpdatedNotification {
  string method = 1; // const: "notifications/resources/updated"
  
  message Params {
    // The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
    string uri = 1;
  }
  Params params = 2;
}

message Result {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Struct _meta = 1;
}

// The sender or recipient of messages and data in a conversation.
enum Role {
  ROLE_UNSPECIFIED = 0;
  ASSISTANT = 1;
  USER = 2;
}

// Represents a root directory or file that the server can operate on.
message Root {
  // An optional name for the root. This can be used to provide a human-readable
  // identifier for the root, which may be useful for display purposes or for
  // referencing the root in other parts of the application.
  string name = 1;
  
  // The URI identifying the root. This *must* start with file:// for now.
  // This restriction may be relaxed in future versions of the protocol to allow
  // other URI schemes.
  string uri = 2;
}

// A notification from the client to the server, informing it that the list of roots has changed.
// This notification should be sent whenever the client adds, removes, or modifies any root.
// The server should then request an updated list of roots using the ListRootsRequest.
message RootsListChangedNotification {
  string method = 1; // const: "notifications/roots/list_changed"
  
  message Params {
    // This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
    google.protobuf.Struct _meta = 1;
  }
  Params params = 2;
}

// Describes a message issued to or received from an LLM API.
message SamplingMessage {
  Content content = 1;
  Role role = 2;
}

// Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.
message ServerCapabilities {
  // Present if the server supports argument autocompletion suggestions.
  google.protobuf.Struct completions = 1;
  
  // Experimental, non-standard capabilities that the server supports.
  map<string, google.protobuf.Struct> experimental = 2;
  
  // Present if the server supports sending log messages to the client.
  google.protobuf.Struct logging = 3;
  
  // Present if the server offers any prompt templates.
  message Prompts {
    // Whether this server supports notifications for changes to the prompt list.
    bool listChanged = 1;
  }
  Prompts prompts = 4;
  
  // Present if the server offers any resources to read.
  message Resources {
    // Whether this server supports notifications for changes to the resource list.
    bool listChanged = 1;
    
    // Whether this server supports subscribing to resource updates.
    bool subscribe = 2;
  }
  Resources resources = 5;
  
  // Present if the server offers any tools to call.
  message Tools {
    // Whether this server supports notifications for changes to the tool list.
    bool listChanged = 1;
  }
  Tools tools = 6;
}

message ServerNotification {
  oneof notification {
    CancelledNotification cancelled = 1;
    ProgressNotification progress = 2;
    ResourceListChangedNotification resourceListChanged = 3;
    ResourceUpdatedNotification resourceUpdated = 4;
    PromptListChangedNotification promptListChanged = 5;
    ToolListChangedNotification toolListChanged = 6;
    LoggingMessageNotification loggingMessage = 7;
  }
}

message ServerRequest {
  oneof request {
    PingRequest ping = 1;
    CreateMessageRequest createMessage = 2;
    ListRootsRequest listRoots = 3;
  }
}

message ServerResult {
  oneof result {
    Result genericResult = 1;
    InitializeResult initialize = 2;
    ListResourcesResult listResources = 3;
    ListResourceTemplatesResult listResourceTemplates = 4;
    ReadResourceResult readResource = 5;
    ListPromptsResult listPrompts = 6;
    GetPromptResult getPrompt = 7;
    ListToolsResult listTools = 8;
    CallToolResult callTool = 9;
    CompleteResult complete = 10;
  }
}

// A request from the client to the server, to enable or adjust logging.
message SetLevelRequest {
  string method = 1; // const: "logging/setLevel"
  
  message Params {
    // The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message.
    LoggingLevel level = 1;
  }
  Params params = 2;
}

// Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.
message SubscribeRequest {
  string method = 1; // const: "resources/subscribe"
  
  message Params {
    // The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
    string uri = 1;
  }
  Params params = 2;
}

// Text provided to or from an LLM.
message TextContent {
  // Optional annotations for the client.
  Annotations annotations = 1;
  
  // The text content of the message.
  string text = 2;
  
  string type = 3; // const: "text"
}

message TextResourceContents {
  // The MIME type of this resource, if known.
  string mimeType = 1;
  
  // The text of the item. This must only be set if the item can actually be represented as text (not binary data).
  string text = 2;
  
  // The URI of this resource.
  string uri = 3;
}

// Definition for a tool the client can call.
message Tool {
  // Optional additional tool information.
  ToolAnnotations annotations = 1;
  
  // A human-readable description of the tool.
  // This can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a "hint" to the model.
  string description = 2;
  
  // A JSON Schema object defining the expected parameters for the tool.
  message InputSchema {
    map<string, google.protobuf.Struct> properties = 1;
    repeated string required = 2;
    string type = 3; // const: "object"
  }
  InputSchema inputSchema = 3;
  
  // The name of the tool.
  string name = 4;
}

// Additional properties describing a Tool to clients.
// NOTE: all properties in ToolAnnotations are **hints**.
// They are not guaranteed to provide a faithful description of
// tool behavior (including descriptive properties like `title`).
// Clients should never make tool use decisions based on ToolAnnotations
// received from untrusted servers.
message ToolAnnotations {
  // If true, the tool may perform destructive updates to its environment.
  // If false, the tool performs only additive updates.
  // (This property is meaningful only when `readOnlyHint == false`)
  // Default: true
  bool destructiveHint = 1;
  
  // If true, calling the tool repeatedly with the same arguments
  // will have no additional effect on the its environment.
  // (This property is meaningful only when `readOnlyHint == false`)
  // Default: false
  bool idempotentHint = 2;
  
  // If true, this tool may interact with an "open world" of external
  // entities. If false, the tool's domain of interaction is closed.
  // For example, the world of a web search tool is open, whereas that
  // of a memory tool is not.
  // Default: true
  bool openWorldHint = 3;
  
  // If true, the tool does not modify its environment.
  // Default: false
  bool readOnlyHint = 4;
  
  // A human-readable title for the tool.
  string title = 5;
}

// An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.
message ToolListChangedNotification {
  string method = 1; // const: "notifications/tools/list_changed"
  
  message Params {
    // This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
    google.protobuf.Struct _meta = 1;
  }
  Params params = 2;
}

// Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.
message UnsubscribeRequest {
  string method = 1; // const: "resources/unsubscribe"
  
  message Params {
    // The URI of the resource to unsubscribe from.
    string uri = 1;
  }
  Params params = 2;
}